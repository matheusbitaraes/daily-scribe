#!/bin/bash

# Daily Scribe Network Configuration Script
# Helps configure static IP and network settings for the server

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

# Get current network information
get_network_info() {
    log_info "Gathering current network information..."
    
    # Get current IP address
    local current_ip=""
    if command -v hostname &> /dev/null; then
        current_ip=$(hostname -I 2>/dev/null | awk '{print $1}' || echo "")
    fi
    
    if [[ -z "$current_ip" ]]; then
        current_ip=$(ip route get 8.8.8.8 2>/dev/null | awk '{print $7}' | head -1 || echo "Unknown")
    fi
    
    # Get gateway IP
    local gateway_ip=""
    if command -v ip &> /dev/null; then
        gateway_ip=$(ip route | grep default | awk '{print $3}' | head -1 || echo "Unknown")
    fi
    
    # Get primary interface
    local interface=""
    if command -v ip &> /dev/null; then
        interface=$(ip route | grep default | awk '{print $5}' | head -1 || echo "Unknown")
    fi
    
    # Get MAC address
    local mac_address=""
    if [[ -n "$interface" ]] && [[ "$interface" != "Unknown" ]]; then
        mac_address=$(ip link show "$interface" 2>/dev/null | grep "link/ether" | awk '{print $2}' || echo "Unknown")
    fi
    
    # Get current DNS servers
    local dns_servers=""
    if [[ -f "/etc/resolv.conf" ]]; then
        dns_servers=$(grep "^nameserver" /etc/resolv.conf | awk '{print $2}' | tr '\n' ' ' || echo "Unknown")
    fi
    
    # Get network range
    local network_range=""
    if [[ -n "$current_ip" ]] && [[ "$current_ip" != "Unknown" ]]; then
        network_range=$(echo "$current_ip" | sed 's/\.[0-9]*$/.*/')
    fi
    
    echo ""
    echo "Current Network Configuration:"
    echo "============================="
    echo "Current IP:      $current_ip"
    echo "Gateway IP:      $gateway_ip"
    echo "Interface:       $interface"
    echo "MAC Address:     $mac_address"
    echo "Network Range:   $network_range"
    echo "DNS Servers:     $dns_servers"
    echo ""
    
    # Export for use in other functions
    export CURRENT_IP="$current_ip"
    export GATEWAY_IP="$gateway_ip"
    export INTERFACE="$interface"
    export MAC_ADDRESS="$mac_address"
    export NETWORK_RANGE="$network_range"
    export DNS_SERVERS="$dns_servers"
}

# Suggest static IP configuration
suggest_static_ip() {
    log_info "Suggesting static IP configuration..."
    
    if [[ "$CURRENT_IP" == "Unknown" ]] || [[ "$GATEWAY_IP" == "Unknown" ]]; then
        log_error "Cannot suggest static IP without current network information"
        return 1
    fi
    
    # Suggest an IP in the same subnet
    local suggested_ip=""
    local base_ip=""
    
    # Extract base IP (first three octets)
    base_ip=$(echo "$CURRENT_IP" | sed 's/\.[0-9]*$//')
    
    # Suggest different IPs based on current range
    if [[ "$base_ip" == "192.168.1" ]]; then
        suggested_ip="192.168.1.100"
    elif [[ "$base_ip" == "192.168.0" ]]; then
        suggested_ip="192.168.0.100"
    elif [[ "$base_ip" == "10.0.0" ]]; then
        suggested_ip="10.0.0.100"
    else
        # Generic suggestion
        suggested_ip="${base_ip}.100"
    fi
    
    echo "Suggested Static IP Configuration:"
    echo "================================="
    echo "Static IP:       $suggested_ip"
    echo "Gateway:         $GATEWAY_IP"
    echo "Netmask:         255.255.255.0 (/24)"
    echo "DNS Servers:     8.8.8.8, 1.1.1.1"
    echo ""
    
    export SUGGESTED_IP="$suggested_ip"
}

# Generate netplan configuration
generate_netplan_config() {
    local static_ip="$1"
    local gateway="$2"
    local interface="$3"
    local dns1="${4:-8.8.8.8}"
    local dns2="${5:-1.1.1.1}"
    
    cat << EOF
# Generated by Daily Scribe network configuration script
# File: /etc/netplan/01-daily-scribe-static.yaml
# Generated on: $(date)

network:
  version: 2
  renderer: networkd
  ethernets:
    $interface:
      dhcp4: false
      addresses:
        - $static_ip/24
      gateway4: $gateway
      nameservers:
        addresses:
          - $dns1
          - $dns2
        search:
          - local
EOF
}

# Interactive configuration
interactive_config() {
    log_info "Starting interactive network configuration..."
    
    echo "This script will help you configure a static IP for your Daily Scribe server."
    echo "Press Ctrl+C at any time to cancel."
    echo ""
    
    # Confirm current information
    echo "Current network information detected:"
    echo "Current IP: $CURRENT_IP"
    echo "Gateway: $GATEWAY_IP"
    echo "Interface: $INTERFACE"
    echo ""
    
    read -p "Is this information correct? (y/n): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_error "Please check your network configuration and run the script again"
        return 1
    fi
    
    # Get desired static IP
    echo ""
    echo "Suggested static IP: $SUGGESTED_IP"
    read -p "Enter desired static IP (or press Enter to use suggested): " static_ip
    
    if [[ -z "$static_ip" ]]; then
        static_ip="$SUGGESTED_IP"
    fi
    
    # Validate IP format
    if ! [[ $static_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        log_error "Invalid IP address format: $static_ip"
        return 1
    fi
    
    # Get gateway (default to current)
    echo ""
    read -p "Enter gateway IP (or press Enter to use $GATEWAY_IP): " gateway
    if [[ -z "$gateway" ]]; then
        gateway="$GATEWAY_IP"
    fi
    
    # Get DNS servers
    echo ""
    read -p "Enter primary DNS server (or press Enter for 8.8.8.8): " dns1
    if [[ -z "$dns1" ]]; then
        dns1="8.8.8.8"
    fi
    
    read -p "Enter secondary DNS server (or press Enter for 1.1.1.1): " dns2
    if [[ -z "$dns2" ]]; then
        dns2="1.1.1.1"
    fi
    
    # Show configuration summary
    echo ""
    echo "Configuration Summary:"
    echo "====================="
    echo "Static IP:       $static_ip"
    echo "Gateway:         $gateway"
    echo "Interface:       $INTERFACE"
    echo "Primary DNS:     $dns1"
    echo "Secondary DNS:   $dns2"
    echo ""
    
    read -p "Apply this configuration? (y/n): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Configuration cancelled"
        return 1
    fi
    
    # Generate and apply configuration
    apply_static_config "$static_ip" "$gateway" "$INTERFACE" "$dns1" "$dns2"
}

# Apply static IP configuration
apply_static_config() {
    local static_ip="$1"
    local gateway="$2"
    local interface="$3"
    local dns1="$4"
    local dns2="$5"
    
    log_info "Applying static IP configuration..."
    
    # Check if we're running as root
    if [[ $EUID -ne 0 ]]; then
        log_error "This operation requires root privileges"
        log_info "Please run: sudo $0 apply-static"
        return 1
    fi
    
    # Backup existing netplan configuration
    local backup_dir="/etc/netplan/backup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"
    
    if ls /etc/netplan/*.yaml &> /dev/null; then
        cp /etc/netplan/*.yaml "$backup_dir/" 2>/dev/null || true
        log_info "Backed up existing netplan configuration to $backup_dir"
    fi
    
    # Generate new configuration
    local config_file="/etc/netplan/01-daily-scribe-static.yaml"
    generate_netplan_config "$static_ip" "$gateway" "$interface" "$dns1" "$dns2" > "$config_file"
    
    log_info "Generated new netplan configuration: $config_file"
    
    # Test the configuration
    log_info "Testing netplan configuration..."
    if netplan try --timeout 30; then
        log_success "Static IP configuration applied successfully!"
        log_info "New IP address: $static_ip"
        log_info "You may need to update SSH connections and reconnect"
    else
        log_error "Failed to apply netplan configuration"
        log_info "Restoring backup configuration..."
        
        # Restore backup
        rm -f "$config_file"
        if [[ -d "$backup_dir" ]]; then
            cp "$backup_dir"/*.yaml /etc/netplan/ 2>/dev/null || true
            netplan apply
        fi
        
        return 1
    fi
}

# Generate DHCP reservation instructions
generate_dhcp_instructions() {
    log_info "Generating DHCP reservation instructions..."
    
    local suggested_ip="${SUGGESTED_IP:-192.168.1.100}"
    
    cat << EOF

DHCP Reservation Configuration Guide
===================================

To configure DHCP reservation on your router instead of static IP:

Router Information:
- Router IP: $GATEWAY_IP
- Server MAC Address: $MAC_ADDRESS
- Suggested Reserved IP: $suggested_ip

Steps:
1. Open web browser and go to: http://$GATEWAY_IP
2. Login with your router admin credentials
3. Navigate to DHCP settings (usually under LAN or Network)
4. Look for "DHCP Reservations", "Static DHCP", or "Reserved IPs"
5. Add new reservation:
   - MAC Address: $MAC_ADDRESS
   - IP Address: $suggested_ip
   - Description: Daily Scribe Server
6. Save configuration and restart router if needed

Common Router Paths:
- Netgear: Advanced → LAN Setup → Address Reservation
- Linksys: Smart Wi-Fi Tools → DHCP Reservations
- ASUS: Advanced Settings → LAN → DHCP Server
- TP-Link: Advanced → Network → DHCP Server

After configuring DHCP reservation:
- Restart your server or renew DHCP lease
- Verify IP assignment: ip addr show
- Test connectivity: ping $GATEWAY_IP

EOF
}

# Test current network configuration
test_network() {
    log_info "Testing current network configuration..."
    
    # Test local connectivity
    echo -n "Testing gateway connectivity: "
    if ping -c 1 -W 3 "$GATEWAY_IP" &> /dev/null; then
        log_success "Gateway reachable"
    else
        log_error "Gateway unreachable"
    fi
    
    # Test internet connectivity
    echo -n "Testing internet connectivity: "
    if ping -c 1 -W 5 8.8.8.8 &> /dev/null; then
        log_success "Internet reachable"
    else
        log_error "Internet unreachable"
    fi
    
    # Test DNS resolution
    echo -n "Testing DNS resolution: "
    if nslookup google.com &> /dev/null; then
        log_success "DNS working"
    else
        log_error "DNS not working"
    fi
    
    # Test Daily Scribe service
    echo -n "Testing Daily Scribe service: "
    if curl -s http://localhost:8000/healthz &> /dev/null; then
        log_success "Service responding"
    else
        log_warning "Service not responding (may not be started)"
    fi
}

# Show current IP allocation
show_ip_allocation() {
    log_info "Scanning network for IP allocation..."
    
    if [[ "$GATEWAY_IP" == "Unknown" ]]; then
        log_error "Cannot scan network without gateway information"
        return 1
    fi
    
    local base_ip
    base_ip=$(echo "$GATEWAY_IP" | sed 's/\.[0-9]*$//')
    
    echo "Scanning network range: ${base_ip}.1-254"
    echo "This may take a few moments..."
    echo ""
    
    # Simple ping sweep
    for i in {1..254}; do
        local ip="${base_ip}.$i"
        if ping -c 1 -W 1 "$ip" &> /dev/null; then
            local hostname=""
            hostname=$(nslookup "$ip" 2>/dev/null | grep "name =" | awk '{print $4}' | sed 's/\.$//' || echo "Unknown")
            
            if [[ "$ip" == "$CURRENT_IP" ]]; then
                echo "$ip - Current server (This machine) - $hostname"
            elif [[ "$ip" == "$GATEWAY_IP" ]]; then
                echo "$ip - Router/Gateway - $hostname"
            else
                echo "$ip - Active device - $hostname"
            fi
        fi
    done | sort -V
    
    echo ""
    echo "Free IP addresses in range are available for static assignment."
}

# Show usage information
show_usage() {
    cat << EOF
Daily Scribe Network Configuration Script

Usage: $0 [COMMAND] [OPTIONS]

COMMANDS:
    info                 Show current network information
    suggest             Suggest static IP configuration
    interactive         Interactive static IP configuration
    apply-static        Apply static IP configuration (requires sudo)
    dhcp-guide          Generate DHCP reservation instructions
    test                Test current network configuration
    scan                Scan network for active devices
    help                Show this help message

OPTIONS:
    --ip IP             Specify static IP address
    --gateway IP        Specify gateway IP address
    --dns1 IP           Specify primary DNS server
    --dns2 IP           Specify secondary DNS server

EXAMPLES:
    $0 info                                 # Show current network info
    $0 suggest                             # Get IP configuration suggestions
    $0 interactive                         # Interactive configuration
    sudo $0 apply-static --ip 192.168.1.100  # Apply specific static IP
    $0 dhcp-guide                         # Generate DHCP reservation guide
    $0 test                               # Test network connectivity
    $0 scan                               # Scan for active devices

This script helps configure static IP addressing for your Daily Scribe server.
You can either configure static IP on the server or use DHCP reservation on your router.

EOF
}

# Main function
main() {
    local command="${1:-info}"
    
    case "$command" in
        "info")
            get_network_info
            ;;
        "suggest")
            get_network_info
            suggest_static_ip
            ;;
        "interactive")
            get_network_info
            suggest_static_ip
            interactive_config
            ;;
        "apply-static")
            shift
            # Parse additional arguments for apply-static
            local static_ip=""
            local gateway=""
            local dns1="8.8.8.8"
            local dns2="1.1.1.1"
            
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --ip)
                        static_ip="$2"
                        shift 2
                        ;;
                    --gateway)
                        gateway="$2"
                        shift 2
                        ;;
                    --dns1)
                        dns1="$2"
                        shift 2
                        ;;
                    --dns2)
                        dns2="$2"
                        shift 2
                        ;;
                    *)
                        log_error "Unknown option: $1"
                        show_usage
                        exit 1
                        ;;
                esac
            done
            
            get_network_info
            
            if [[ -z "$static_ip" ]]; then
                suggest_static_ip
                static_ip="$SUGGESTED_IP"
            fi
            
            if [[ -z "$gateway" ]]; then
                gateway="$GATEWAY_IP"
            fi
            
            apply_static_config "$static_ip" "$gateway" "$INTERFACE" "$dns1" "$dns2"
            ;;
        "dhcp-guide")
            get_network_info
            suggest_static_ip
            generate_dhcp_instructions
            ;;
        "test")
            get_network_info
            test_network
            ;;
        "scan")
            get_network_info
            show_ip_allocation
            ;;
        "help"|"--help"|"-h")
            show_usage
            ;;
        *)
            log_error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
